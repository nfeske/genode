

              ===============================================
              Release notes for the Genode OS Framework 16.05
              ===============================================

                               Genode Labs



; intro
; -> @nfeske

; XXX where to announce the updated book?


The great API renovation
########################

; -> @nfeske

commit 115b13941051fa8e606d2afcaad185400b19ae52
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Fri May 20 14:49:45 2016 +0200

    Update of the hello tutorial

; * cnuke's migration guide


Base framework
##############

; -> @nfeske


New component API
=================

commit 4f69772ecca4cdb03d330cb3709c7e1e35607f8e
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Apr 27 22:11:38 2016 +0200

    Replace 'Env' interface with modern one
    
    The original 'Env' interface as returned by 'Genode::env()' has been
    renamed to 'Env_deprecated' and moved to deprecated/env.h. The new version
    of base/env.h contains the interface passed to modern components that
    use the component API via base/component.h.
    
    Issue #1832

commit 051e84c4b47f89b0d321147ec01cd0cee4e0961c
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Dec 23 15:22:33 2015 +0100

    Move server API concept to base framework
    
    This commit introduces the new `Component` interface in the form of the
    headers base/component.h and base/entrypoint.h. The os/server.h API
    has become merely a compatibilty wrapper and will eventually be removed.
    The same holds true for os/signal_rpc_dispatcher.h. The mechanism has
    moved to base/signal.h and is now called 'Signal_handler'.
    
    Since the patch shuffles headers around, please do a 'make clean' in the
    build directory.
    
    Issue #1832

commit 73b463cdbb6d8aeb89eff8fa371f519d493e91bf
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Apr 20 23:22:12 2016 +0200

    Signal_handler: remove num argument from handler
    
    We will eventually remove the delivery of the number of occurred signals
    to the recipient. There haven't been any convincing use cases for this
    feature. In the contrary, it actually led to wrong design choices in the
    past where the rate of signals carried information (such as the progress
    of time) that should better be obtained via an explicit RPC call.
    
    The old 'Signal_rpc_member' template retains the old interface for now.
    But the new 'Signal_handler' omits the 'unsigned' argument from the
    handler function.

; * no longer directly use: base/signal.h

commit a7b3072cc2120434a201eca019c743539de23cfa
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue May 10 17:24:51 2016 +0200

    Pass Env & as first argument to connection objects
    
    This patch supplements each existing connection type with an new
    constructor that is meant to replace the original one. The new
    one takes a reference to the component's environment as argument and
    thereby does not rely on the presence of the globally accessible
    'env()' interface.
    
    The original constructors are marked as deprecated. Once we have
    completely abolished the use of the global 'env()', we will remove them.
    
    Fixes #1960


Consolidation of core's SIGNAL, CAP, RM, and PD services
========================================================

commit b1910cdd54d77183bcce7cd7fb7594a0c4c5fa17
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Thu Jan 14 13:22:00 2016 +0100

    Integrate SIGNAL session into PD session
    
    This patch removes the SIGNAL service from core and moves its
    functionality to the PD session. Furthermore, it unifies the PD service
    implementation and terminology across the various base platforms.
    
    Issue #1841

commit 62b1c55399d6dc1b59548e542b35751ff2a3f425
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Jan 19 20:24:22 2016 +0100

    Integrate CAP session into PD session
    
    This patch integrates the functionality of the former CAP session into
    the PD session and unifies the approch of supplementing the generic PD
    session with kernel-specific functionality. The latter is achieved by
    the new 'Native_pd' interface. The kernel-specific interface can be
    obtained via the Pd_session::native_pd accessor function. The
    kernel-specific interfaces are named Nova_native_pd, Foc_native_pd, and
    Linux_native_pd.
    
    The latter change allowed for to deduplication of the
    pd_session_component code among the various base platforms.
    
    To retain API compatibility, we keep the 'Cap_session' and
    'Cap_connection' around. But those classes have become mere wrappers
    around the PD session interface.
    
    Issue #1841

commit 511acad5074878bbaae46ae0aebab1b52fbb97b1
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Fri Apr 15 15:19:22 2016 +0200

    Consolidate RM service into PD session
    
    This patch integrates three region maps into each PD session to
    reduce the session overhead and to simplify the PD creation procedure.
    Please refer to the issue cited below for an elaborative discussion.
    
    Note the API change:
    
    With this patch, the semantics of core's RM service have changed. Now,
    the service is merely a tool for creating and destroying managed
    dataspaces, which are rarely needed. Regular components no longer need a
    RM session. For this reason, the corresponding argument for the
    'Process' and 'Child' constructors has been removed.
    
    The former interface of the 'Rm_session' is not named 'Region_map'. As a
    minor refinement, the 'Fault_type' enum values are now part of the
    'Region_map::State' struct.
    
    Issue #1938

commit b49e588c1cabd11d0433fd686d79b7c8c3e5bbbf
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Apr 20 21:12:57 2016 +0200

    Assign threads to PD at its creation time
    
    This patch replaces the former 'Pd_session::bind_thread' function by a
    PD-capability argument of the 'Cpu_session::create_thread' function, and
    removes the ancient thread-start protocol via 'Rm_session::add_client' and
    'Cpu_session::set_pager'. Threads are now bound to PDs at their creation
    time and implicitly paged according to the address space of the PD.
    
    Note the API change:
    
    This patch changes the signature of the 'Child' and 'Process' constructors.
    There is a new 'address_space' argument, which represents the region map
    representing the child's address space. It is supplied separately to the
    PD session capability (which principally can be invoked to obtain the
    PD's address space) to allow the population of the address space
    without relying on an 'Pd_session::address_space' RPC call.
    Furthermore, a new (optional) env_pd argument allows the explicit
    overriding of the PD capability handed out to the child as part of its
    environment. It can be used to intercept the interaction of the child
    with its PD session at core. This is used by Noux.
    
    Issue #1938

; * removed: cap_session/cap_session.h
; * deprecated: cap_session/connection.h


New log-output facilities
=========================

commit 1f395ae780775942cd29d2268d6d6d7b78dcfb3d
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue May 3 16:31:17 2016 +0200

    base: new interface for textual output
    
    Issue #1942

; * deprecated  base/printf.h, base/console.h, base/snprintf.h


XML processing
==============

commit 2bc8a0f76a5d5ad7266c1b37e596bcbb130f9241
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Apr 26 19:09:29 2016 +0200

    Move XML util from os to base repository
    
    Since the dynamic linker depends on the XML utils and we plan to replace
    the ancient 'Arg_string' with XML, it is time to move the 'Xml_node' and
    'Xml_generator' to base/include.

commit 463b39fc73f6833d8987bd59e22225d9794e00d0
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Mon Apr 18 21:13:47 2016 +0200

    xml reporter: support different start node name
    
    Currently the report name is used implicitly as first xml node name for the
    report.  This is inconvenient if one component wants to generate various xml
    reports under various names (e.g. to steer consumers/clients slightly
    differently) but with the same xml node tree structure.
    
    Fixes #1940

commit 4aafa882d8e7cfe7f8de99a525c9e18583183df5
Author: Emery Hemingway <emery@vfemail.net>
Date:   Mon Nov 23 13:34:17 2015 +0100

    XML node type and attribute name string accessors
    
    Issue #1786


Dataspace helpers
=================

commit 8d797105b39eaf3a988d5f3d4e918714d682cc7e
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Mon May 9 15:55:12 2016 +0200

    Move Attach_*dataspace utils from os to base
    
    Fixes #1958

commit 8da737acfdedcc7e46f05e0bf87570bd25294f3f
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Mon May 9 17:09:43 2016 +0200

    base: add Attached_rom_dataspace::xml method
    
    Issue #1959

; * deprecated: os/config.h


Thread API and CPU-session interface
====================================

commit 7f73e5e879a748b21c795094f96d0aef2d4487ab
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Sat Jan 23 14:42:55 2016 +0100

    base: hide internals of the Thread API
    
    This patch moves details about the stack allocation and organization
    the base-internal headers. Thereby, I replaced the notion of "thread
    contexts" by "stacks" as this term is much more intuitive. The fact that
    we place thread-specific information at the bottom of the stack is not
    worth introducing new terminology.
    
    Issue #1832

commit fd401bdf53e1cc6841f0f22f45b7b04444e81dfd
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed May 4 12:27:17 2016 +0200

    Thread API cleanup
    
    This patch cleans up the thread API and comes with the following
    noteworthy changes:
    
    - Introduced Cpu_session::Weight type that replaces a formerly used
      plain integer value to prevent the accidental mix-up of
      arguments.
    - The enum definition of Cpu_session::DEFAULT_WEIGHT moved to
      Cpu_session::Weight::DEFAULT_WEIGHT
    - New Thread constructor that takes a 'Env &' as first argument.
      The original constructors are now marked as deprecated. For the
      common use case where the default 'Weight' and 'Affinity' are
      used, a shortcut is provided. In the long term, those two
      constructors should be the only ones to remain.
    - The former 'Thread<>' class template has been renamed to
      'Thread_deprecated'.
    - The former 'Thread_base' class is now called 'Thread'.
    - The new 'name()' accessor returns the thread's name as 'Name'
      object as centrally defined via 'Cpu_session::Name'. It is meant to
      replace the old-fashioned 'name' method that takes a buffer and size
      as arguments.
    - Adaptation of the thread test to the new API
    
    Issue #1954

commit 0c299c5e08b8ff4d19697283307446ca0f0e2644
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Mar 30 15:34:37 2016 +0200

    base: separate native CPU from CPU session
    
    This patch unifies the CPU session interface across all platforms. The
    former differences are moved to respective "native-CPU" interfaces.
    
    NOVA is not covered by the patch and still relies on a custom version of
    the core-internal 'cpu_session_component.h'. However, this will soon be
    removed once the ongoing rework of pause/single-step on NOVA is
    completed.
    
    Fixes #1922

commit a99989af40876d01307ab4745bdc3b9fdfed65bd
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue May 10 18:05:38 2016 +0200

    Separation of thread operations from CPU session
    
    This patch moves the thread operations from the 'Cpu_session'
    to the 'Cpu_thread' interface.
    
    A noteworthy semantic change is the meaning of the former
    'exception_handler' function, which used to define both, the default
    exception handler or a thread-specific signal handler. Now, the
    'Cpu_session::exception_sigh' function defines the CPU-session-wide
    default handler whereas the 'Cpu_thread::exception_sigh' function
    defines the thread-specific one.
    
    To retain the ability to create 'Child' objects without invoking a
    capability, the child's initial thread must be created outside the
    'Child::Process'. It is now represented by the 'Child::Initial_thread',
    which is passed as argument to the 'Child' constructor.
    
    Fixes #1939


Child management
================

The 'Child' class has been adapted to the changed core services and partially
redesigned to enable the implementation of single-threaded runtime
environments that virtualize the CPU, PD, and RAM services. It thereby has
become free from side effects. I.e., instead of implicitly using
'Genode::env()->rm_session()', it takes the reference to the local region map
as argument. Also, the handling of the dynamic linker via global variables is
gone. Now, the linker binary must be provided as constructor argument.


Stylistic changes
=================

:'Heap', 'Sliced_heap', 'Root_component':

  We added new constructors to these classes that take references, not
  pointers, as arguments. The old constructors will be removed with the
  next release.

:Naming of boolean getter methods:

  We already follow a convention about the naming of accessor methods (not
  using any get_ or set_ prefixes). However, we sometimes used an "is_" prefix
  for getter functions of boolean values, but not always. Examples are
  'Capability::valid()' and 'Weak_ptr::is_valid()'.

  In the name of the principle of least surprise, we introduced the convention
  to not use an "is_" prefix for such methods. We adjusted all occurrences
  within the Genode code base accordingly. To maintain API compatibility
  during the transitional phase, keep the original methods until the next
  release.

:Alleviating the need for manually constructed type lists:

  The 'GENODE_RPC_INTERFACE' macro of the RPC framework had a limitation
  with respect to the number of RPC functions per RPC interface. As a
  workaround for this limitation, large session interfaces had to manually
  define the type list of RPC functions out of nested type tuples. With the
  current release, we removed the limitation.


Removed and to-be-removed APIs
==============================

:'base/crt0.h' and 'base/elf.h':

  Those headers are internally needed by the framework but contain no
  actual value at the API level. Therefore we removed them from the
  public API.

:'base/process.h':

  The 'Process' class encapsulated the platform-specific steps to start
  a Genode component with a given ELF file. The original intention of
  placing this low-level mechanism into a dedicated class was to allow
  for different flavours it child-management policies. In practice, however,
  the 'Process' remained solely being used by the 'Genode::Child'. Since
  the core-interface changes of Section
  [Consolidation of core's SIGNAL, CAP, RM, and PD services]
  required us to rewrite the component-creation code anyway and we aspire to
  narrow the API, we took the chance make 'Process' private to the 'Child'.
  The rather ambiguous term "process", which we avoid in the context
  of Genode by speaking of "components" instead, is eliminated from the public
  API.

:'util/arg_string.h':

  The 'Arg_string' utilities are used to generate and parse session-argument
  strings. However, to make Genode more coherent and session arguments more
  flexible and robust, we plan to replace the current argument-string
  syntax with XML, eventually removing the argument-string support. Hence,
  we discourage the use of 'util/arg_string.h'.

:'base/signal.h':

  The introduction of the new 'Entrypoint' eliminates the need to manually
  create and use 'Signal_receiver'. Right now, we still rely on the original
  signal API as backend of the 'Entrypoint' but we will eventually remove
  the current notion of signal receivers. The narrower semantics of the
  'Entrypoint' will then allow for performance optimizations that are not
  possible with the traditional signal receivers. Therefore, we discourage
  the direct use it 'Signal_receiver'.


Low-level OS infrastructure
###########################

Enhanced GDB support on NOVA
============================

; -> @cproc

commit 2cde1d36c122b459bab5f282da57e9e770c29e2c
Author: Christian Prochaska <christian.prochaska@genode-labs.com>
Date:   Tue May 17 16:13:56 2016 +0200

    base: changes for GDB monitor
    
    - add a new function 'binary_ready_hook_for_gdb()' in ldso. GDB can set a
      breakpoint at this function to know when ldso has loaded the binary
      into memory.
    - get the thread state from the NOVA kernel immediately on 'pause()'
    
    Fixes #1968

commit 5842b2065e06ecc1ee88847ea7b74b1b7024d334
Author: Christian Prochaska <christian.prochaska@genode-labs.com>
Date:   Tue May 17 16:13:23 2016 +0200

    GDB monitor: stability improvements
    
    Fixes #1969

commit ff76e6954218f2c19b20d8288ace3ae114743d44
Author: Christian Prochaska <christian.prochaska@genode-labs.com>
Date:   Sun Mar 6 15:25:38 2016 +0100

    GDB monitor: x86_64 support
    
    General support for the x86_64 architecture.
    
    Fixes #1970

commit 638db70b94c104e67bea6d4ec3cc2088a76a2ce9
Author: Christian Prochaska <christian.prochaska@genode-labs.com>
Date:   Tue Apr 19 20:00:31 2016 +0200

    GDB monitor: nova_x86_64 platform support
    
    Fixes #1971


New support for the rust programming language
=============================================

; -> @nfeske

commit 28117fee12e84aac5b95e371295b8498037fb7c2
Author: Waylon Cude <waylon531@firechicken.net>
Date:   Sun Feb 28 22:44:04 2016 -0800

    Added rust support
    
    Rust relies on atomic builtins, which are not implemented in libgcc for
    ARM. One is implemented in rust, which is sufficient to get the
    current rust test to run.
    
    Issue #1899

commit 1e95af5bab3a85e104e097144424aaf3b716038c
Author: Waylon Cude <waylon531@firechicken.net>
Date:   Sun Feb 28 22:44:04 2016 -0800

    Fixed linking and memory allocation for rust
    
    Now rlibs are actually linked to programs. Target files have been
    modified to not generate code that requires compiler-rt. Added a target
    for libstd-rust, but it's very broken right now. Moved alloc_system to
    the libports folder because either a memory allocator needs to be
    written in rust or posix_memalign needs to be implemented. Changed
    liblibc to use freebsd as the OS instead of netbsd. Added a library with
    unwind dummy functions.
    
    Rust relies on atomic builtins, which are not implemented in libgcc for
    ARM. One was implemented in rust, which was sufficient to get the
    current rust test to run. Rust libs were added into the group of libs
    for the linker so order no longer matters. The raspberry pi now uses an
    armv6 target.

commit 3ba61a2ddfb034ca657e3d2c20cb31eaeae0641b
Author: Christian Helmuth <christian.helmuth@genode-labs.com>
Date:   Thu May 12 10:26:36 2016 +0200

    Move rust support to libports
    
    Issue #1899


Dynamic linker
==============

; XXX should we keep this section?

The dynamic linker will now check if the binary pointer is valid before
attempting to lookup a symbol. Shared objects with unresolved symbols and
missing dependencies, e.g. a library that references 'errno' but is not linked
against libc, will now produce an error message when they are loaded by the
dynamic linker instead of triggering a ominous page-fault.


New component for writing ROM modules to files
==============================================

The rom-to-file component at _repos/os/src/app/rom_to_file_ requests a ROM
session and writes the content of the ROM dataspace to a file of a file-system
session. It is able to respond to configuration and ROM-module updates. The
name of the ROM module must be specified via the 'rom' attribute of the
components '<config>' node:

! <config rom="pointer"/>

See _run/rom_to_file.run_ for an example.

Thanks to Johannes Schlatow for this contribution!


C runtime
=========

; -> @chelmuth (?), @cproc

commit 93b82c14ac3cd39fda84f6cc61dfab019456cb60
Author: Emery Hemingway <emery@vfemail.net>
Date:   Fri Apr 15 14:19:51 2016 +0200

    libc: read sysctl info from /.sysctl/...
    
    Fixes #1931


commit ea726a1f48b91b830d1ec0589650183cbfda90dd
Author: Christian Prochaska <christian.prochaska@genode-labs.com>
Date:   Sun Mar 6 15:21:23 2016 +0100

    libc: pipe plugin
    
    A libc plugin which implements pipes using a ring buffer.
    
    Fixes #1947


Device drivers
##############

In this release we did update several device drivers that are ported from
forgein OS'. In addition, we consoldiated all drivers in the dde_linux
repository by utilizing the modular lx_kit and made sure that each driver
is using the same Linux version now.


HDA Audio driver update
=======================

The audio driver was synced with version 5.9 of OpenBSD. In addition to
updating the contrib sources the driver now uses the new Component API
and will report the internal mixer state.

Reporting of the mixer state is enabled by adding the 'report_mixer'
attribute to the drivers configuration and setting its value to 'yes'.

The following snippets illustrates the format of the report:

!<mixer_state>
!  <mixer field="inputs.beep" value="108"/>
!  <mixer field="outputs.hp_sense" value="plugged"/>
!  <mixer field="outputs.master" value="128,128"/>
!  <mixer field="outputs.mic_sense" value="unplugged"/>
!  <mixer field="outputs.spkr_muters" value="hp,mic"/>
!</mixer_state>

The mixer state can expose other mixer fields as well, depending on the
used hardware. The naming scheme of the attributes intentionally matches
the naming scheme of OpenBSD's mixerctl(1) program.

In return, 'mixer' nodes may be used to configure the audio driver by
specifying it in the configuration, e.g.:

!<config report_mixer="yes">
!  <mixer field="outputs.master" value="255,255"/>
!</config>

will set the output volume to the highest possible value. Although it is
now also possible to update the configuration at run-time this should only
be done with care. Updating the configuration while the driver is playing
or recording may provoke audible artefacts. For now it is best to use the
mixer component to regulate the volume rather than adjusting the audio
driver directly.


Linux kit
=========

Over the years the way we handled our DDEs has changed. By now it became
clear that it is easier to manage ported drivers without having to rely an
generic API like dde_kit. Using Genode primitives directly enables us to
specially tailor each DDE to the driver in question. That being said,
when having four different drivers (intel_fb, lxip, usb and wifi) and each
has its own specially tailored DDE, the amount of redundant code is huge.
We created the lx_kit that enables us to share code across the drivers as
well as to provide specific pieces in each driver itself to address this
issue and eventually decrease the amount of redundant code.

This modular lx_kit seperates the required back end functionality of the
Linux emulation environment from the front end. Thereby each driver can
reuse generic parts and supply more suitable implementations by itself.
It is split into several layers whose structure is as follows:

The first layer in _repos/dde_linux/src/include/lx_emul_ contains those
header files that provide the structural definitions and function
declarations of the Linux API, e.g. _errno.h_ provides all error code
values. The second layer in _repos/dde_linux/src/include/lx_emul/impl_
contains the implementation of selected functions, e.g. _slab.h_
provides the implementation of 'kmalloc()'. The lx_kit back end API is
the third layer and provides the _Lx::Malloc_ interface
(_repos/dde_linux/src/include/lx_kit/malloc.h_) which is used to
implement 'kmalloc()'. There are several generic implementations of the
lx_kit interfaces that can be used by a driver.

A driver typically includes a 'lx_emul/impl/xyz.h' header once
directly in its lx_emul compilation unit. The lx_kit interface files
are only included in those compilation units that use or implement the
interface. If a driver wants to use a generic implementation it must
add the source file to its source file list. The generic
implementations are located in _repos/dde_linux/src/lx_kit/_.

The modular lx_kit still depends on the private _lx_emul.h_ header file
that is tailored to each driver. Since the lx_kit already contains much
of the declarations and definitions that were originally placed in
these private header files, those files can now ommit a large amount
of code.


Wifi driver update
==================

The wifi_drv was updated to Linux version 4.4.3 and thereby adds support for
Intel wireless card 8xxx series. In order to ease debugging the driver now
enables its debugging messages when the 'verbose' attribute in its 'config'
node is set to 'yes'.


USB driver update
=================

The USB driver was updated to Linux version 4.4.3 and like the other drivers
incorporates the modular lx_kit. The new driver exposed problems with the
EHCI controller on older systems, namely the Thinkpad X201. Using the new USB
driver on this machine would freeze the system when 'USB legacy Support' is
enabled in the BIOS. The fix is to apply the USB hand-off quirk, that informs
the BIOS that the OS wants to drive the USB host-controller and waits until
the BIOS has acknowledged the request. Unfortunatly, applying this quirk
produces problems on certain xHCI host-controllers when using the IOMMU. In
this case the driver tried to perform the hand-off request but got stuck while
writing to the PCI config space. After about 20 seconds we saw a DMA fault and
the initialization of the USB driver went on. Presumably at this point the BIOS
tries to access certain memory regions that by now are protected by the IOMMU.
When using the IOMMU, we already take precautions, i.e., we look at the RMRR
regions and instruct the kernel to configured the IOMMU for specific devices
accordingly. We looked at the ACPI RMRR region of the USB on the machine in
question and could confirm our suspicion: the registered USB RMRR region is
indeed too small. For all we know that sounds like a bug in BIOS or rather
ACPI tables. To accomodate systems that nonetheless need the hand-off quirk
and the user wants to use the IOMMU, we added the handling of a 'bios_handoff'
attribute to the USB driver configuration. When set to 'no' the driver will not
perform any hand-off request. The default setting is 'yes'. If you experience
any issues with the new USB driver, disabling the hand-off is advised.

While updating the driver a regression on the Raspberry Pi was introduced.
USB devices that use IRQ endpoints, e.g. USB HID devices, do not work
reliably. This issue is still unresolved and dealing with it is post-poned
until after the release.

Furthermore, the USB session used for implementing native USB device drivers
propagates an EP stall error to the client and clears the stall condition by
resetting the EP now.


Intel graphics driver update
============================

; -> @skalk

commit 7904fbc108a38f2239ac5107ebb3b6b30a599a73
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Apr 19 15:37:27 2016 +0200

    intel_fb: add Framebuffer controller example
    
    Issue #1974.

commit b45977632e9573c68b115047f6e1201a1ae91c93
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Mar 22 11:04:07 2016 +0100

    dde_linux: update intel_fb to 4.4.3
    
    Issue #1974.


Enhanced ACPI support
=====================

; -> @alexab
; XXX should we move this topic to a top-level section?

commit ce36b560a60ab257a4c09539b49c39879814b860
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Fri May 13 15:52:34 2016 +0200

    acpi_drv: report ACPI reset configuration
    
    Will be/can be used by the platform driver to reset the machine, iif the
    platform driver owns the resources, e.g. the I/O ports of PCI config access.
    
    Issue #1962

commit 2ee123872e5a32d304854ef55c5bf896ede88ddd
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Fri Mar 18 16:31:00 2016 +0100

    libports: add acpica library
    
    Fixes #1962

commit 2221df4fff20e3a8fea7dcffa889eea0ffb2f974
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Fri May 13 16:09:20 2016 +0200

    platform_drv/x86: support ACPI reset
    
    Evaluate fadt xml node in report from acpi_drv. If the io ports in the range
    of 0xcf8+4 are necessary for the reset than the platform driver will
    react on the 'system' state 'reset' and reboot.
    
    Issue #1962


Generalized SDHCI driver
========================

The SDHCD driver was originally creates for the Raspberry Pi. However, the
same host controller is used also in other platforms, in particular Xilinx
Zynq. Hence, the existing driver was generalized to become usable on such
platforms. Thanks to Timo Wischer for this contribution.


Libraries and applications
##########################

LxIP update
===========

LxIP is the port of the Linux TCP/IP stack as a library on Genode.
Along with the work described in Section [Linux kit], LxIP was updated to
Linux version 4.4.3 and uses the lx_kit now.


Qemu USB
========

; XXX should we keep this section or is the level of detail too much?

The QEMU USB library handles EP stalls now. In particular, this fix
enables the usage of USB devices in VirtualBox that do not support certain
SCSI commands, e.g. READ_FORMAT_CAPACITY, and will stall if they receive
such a command. Windows guests typically use the afor mentioned command to
check if the USB storage device in question is in fact an USB floppy drive.


Platforms
#########

Generalization of platform-specific headers
===========================================

In anticipation of the planned binary compatibility of Genode components
across different kernels, we unified most parts of Genode's base API and
largely removed the dependency on platform-specific types. The most profound
change is the interface of the IPC library, which used to depend on
platform-specific message-buffer layouts.
Besides unifying the message buffer classes across all platforms, we
reconsidered the roles of the IPC-library classes such as 'Ipc_marhsaller',
'Ipc_server', and 'Ipc_client'. This led to several further simplifications in
the server-loop implementations, which makes the flow of control and
information much more obvious, yet is also more flexible. I.e., on NOVA, we
don't even have the notion of reply-and-wait. Now, we are no longer forced to
pretend otherwise.


NOVA microhypervisor
====================

; -> @alexab

commit dccad4c526b7ea93f6a5b1d79138423518a2924c
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Thu Apr 28 13:38:21 2016 +0200

    nova: kernel support for more than 4096 processes
    
    Fixes #1951

commit 1622f53dd815804a9a64b0cd89a2f85c8427c9e0
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Thu May 12 12:53:17 2016 +0200

    nova: support fixed ACPI event delivery by kernel
    
    Issue #1962


Execution on bare hardware (base-hw)
====================================

; -> @nfeske

commit 0c34e3802f2cfeed6334d6a1b0c6908770c2ebe5
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Wed May 18 12:20:04 2016 +0200

    hw: use kernel timer for timer driver
    
    * Adds public timeout syscalls to kernel API
      * Kernel::timeout installs a timeout and binds a signal context to it that
        shall trigger once the timeout expired
      * With Kernel::timeout_max_us, one can get the maximum installable timeout
      * Kernel::timeout_age_us returns the time that has passed since the
        calling threads last timeout installation
    
    * Removes all device specific back-ends for the base-hw timer driver and
      implements a generic back-end taht uses the kernel timeout API
    
    * Adds assertions about the kernel timer frequency that originate from the
      requirements of the the kernel timeout API and adjusts all timers
      accordingly by using the their internal dividers
    
    * Introduces the Kernel::Clock class. As member of each Kernel::Cpu object
      it combines the management of the timer of the CPU with a timeout scheduler.
      Not only the timeout API uses the timeout scheduler but also the CPUs job
      scheduler for installing scheduling timeouts.
    
    * Introduces the Kernel::time_t type for timer tic values and values inherited
      from timer tics (like microseconds).
    
    Fixes #1972


Linux
=====

; -> @chelmuth

commit 14f1ac497efc9f4f1fa4d92f8a720e9a0be5403e
Author: Christian Helmuth <christian.helmuth@genode-labs.com>
Date:   Fri Apr 8 18:24:15 2016 +0200

    linux: improve exception-signal handling
    
    First, we use an alternate stack for signal handling now. The stack is
    shared among all threads of the component, which is okay as we only
    handle exceptions with log output and pass on to the default handler
    (that terminates the execution). The primary motivation for the
    alternate stack is the detection of SIGSEGV due to stack overflows.
    
    Also, hybrid components now handle exception signals by logging and the
    support for multi-threaded applications was improved.
    
    Fixes #1935


Tools and build system
######################

Usability improvements of the ports tools
=========================================

The ports tool set introduces in
[http://genode.org/documentation/release-notes/14.05#Management_of_ported_3rd-party_source_code - Genode 14.05]
has become an integral part of the workflow for Genode developers.
With the current release, we improve the usability of the _prepare_port_ tool
in two respects. First, the tool now accept a list of ports instead of
merely a single argument. This alleviates the need to manually re-execute
the tool with different arguments. Second, if the build system encounters
a missing port it no longer backs out immediately but collects all the
(potentially more than one) missing ports that are required for the build.
It then presents the user with a ready-to-use command to install all
missing ports at once, which greatly improves the experience of working with
sophisticated system scenarios. For example, when attempting to execute
the _virtualbox.run_ script with a freshly cloned Genode source tree,
the build system produces the following error message:

!Error: Ports not prepared or outdated:
!  dde_linux libc libiconv nova qemu-usb stdcxx virtualbox x86emu
!
!You can prepare respectively update them as follows:
!  .../prepare_port dde_linux libc libiconv nova qemu-usb stdcxx virtualbox x86emu

Additionally, one may state the number of ports that
shall be prepared in parallel at a max by using the -j parameter. If -j
is not set by the user, the tool acts as with -j1.

Since the _prepare_ports_ tool has completely replaced the former
"make prepare" mechanism, we finally removed the last traces of the old
mechanism in the form of the makefiles present in the respective source-code
repositories.


Updated tool chain
==================

; -> @cproc, @chelmuth

commit 44648bb5c7e0d22789ae9380ad171dd16c58c035
Author: Christian Prochaska <christian.prochaska@genode-labs.com>
Date:   Wed May 18 14:47:36 2016 +0200

    tool_chain/cxx: use '__cxa_demangle()' for exception names
    
    Fixes #1976


Removal of stale features
#########################

We originally added chroot support to the Linux version of Genode to
accommodate the use of Genode as middleware on Linux. We enabled the
configuration of custom UIDs, GIDs, and chroot paths for components started by
init. However, apart from a brief period of time when we experimented with
the idea, it is no longer pursued. Now, with our aspiration to attain binary
compatibility across kernels, we removed the Linux-specific chroot support.
